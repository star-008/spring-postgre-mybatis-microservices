<?xml version="1.0" encoding="UTF-8" ?>
<!--

       Copyright 2015-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tianwen.springcloud.microservice.score.dao.analysis.DifficultyStatsMapper">

    <sql id="calcClassNScoreSum">
        sum(CASE WHEN order_in_class &lt;= (count_in_class * #{filter.more.avgCountPercent} / 100)::int THEN score ELSE 0 END) top_n_score_sum,
        sum(CASE WHEN order_in_class &lt;= (count_in_class * #{filter.more.avgCountPercent} / 100)::int THEN 1 ELSE 0 END) top_n_score_count,

        sum(CASE WHEN order_in_class >= count_in_class - (count_in_class * #{filter.more.avgCountPercent} / 100)::int THEN score ELSE 0 END) last_n_score_sum,
        sum(CASE WHEN order_in_class >= count_in_class - (count_in_class * #{filter.more.avgCountPercent} / 100)::int THEN 1 ELSE 0 END) last_n_score_count,
    </sql>
    <sql id="calcGradeNScoreSum">
        sum(CASE WHEN order_in_grade &lt;= (count_in_grade * #{filter.more.avgCountPercent} / 100)::int THEN score ELSE 0 END) top_n_score_sum,
        sum(CASE WHEN order_in_grade &lt;= (count_in_grade * #{filter.more.avgCountPercent} / 100)::int THEN 1 ELSE 0 END) top_n_score_count,

        sum(CASE WHEN order_in_grade >= count_in_grade - (count_in_grade * #{filter.more.avgCountPercent} / 100)::int THEN score ELSE 0 END) last_n_score_sum,
        sum(CASE WHEN order_in_grade >= count_in_grade - (count_in_grade * #{filter.more.avgCountPercent} / 100)::int THEN 1 ELSE 0 END) last_n_score_count,
    </sql>
    <sql id="calcClassNScore">
        top_n_score_sum / (CASE WHEN top_n_score_count &lt;= 0 THEN 1 ELSE top_n_score_count END) top_n_score,

        last_n_score_sum / (CASE WHEN last_n_score_count &lt;= 0 THEN 1 ELSE last_n_score_count END) last_n_score,
    </sql>
    <sql id="calcGradeNScore">
        top_n_score_sum / (CASE WHEN top_n_score_count &lt;= 0 THEN 1 ELSE top_n_score_count END) top_n_score,

        last_n_score_sum / (CASE WHEN last_n_score_count &lt;= 0 THEN 1 ELSE last_n_score_count END) last_n_score,
    </sql>
    <sql id="calcPassZoneCount">
        <foreach collection="filter.zoneList" item="zone">
            <if test="zone.type == 'top'">
                sum(
                CASE WHEN (
                <if test="zone.highScore != null and zone.highScore != '' and zone.highScore != 0">
                    score &lt; text2numeric(#{zone.highScore}) AND
                </if>
                score >= text2numeric(#{zone.lowScore})
                ) THEN 1 ELSE 0 END
                ) ${zone.category}_count_${zone.level},
            </if>
            <if test="zone.type == 'last'">
                sum(
                CASE WHEN (
                score &lt; text2numeric(#{zone.lowScore})
                ) THEN 1 ELSE 0 END
                ) ${zone.category}_count_${zone.level},
            </if>
        </foreach>
    </sql>
    <sql id="calcPassZonePercent">
        <foreach collection="filter.zoneList" item="zone">
            ${zone.category}_count_${zone.level},
            <if test="zone.category == 'pz'">
                (CASE WHEN stu_applied_exam_count != 0 THEN ${zone.category}_count_${zone.level}::NUMERIC / stu_applied_exam_count::NUMERIC ELSE 0 END) * 100 ${zone.category}_percent_${zone.level},
            </if>
        </foreach>
    </sql>
    <sql id="listData">
        WITH

        <include refid="BaseMapper.stu_score_data" />,

        stu_score_rank_data AS (
            SELECT *,
            ROW_NUMBER() OVER (PARTITION BY subjectid, classid ORDER BY score DESC) order_in_class,
            ROW_NUMBER() OVER (PARTITION BY subjectid ORDER BY score DESC) order_in_grade,

            COUNT(*) OVER (PARTITION BY subjectid, classid) count_in_class,
            COUNT(*) OVER (PARTITION BY subjectid) count_in_grade

            FROM stu_score_data
        ),

        class_count_data AS (
            SELECT classid, subjectid,
            sum(exam_count) stu_exam_count,
            sum(applied_exam_count) stu_applied_exam_count,
            max(score) max_score,
            min(score) min_score,
            round(avg(score), 2) score,

            <include refid="calcClassNScoreSum" />

            sqrt(variance(score)) diff,
            avg(full_score) full_score,

            <include refid="calcPassZoneCount" />    
        
            sum(CASE WHEN score >= full_score THEN 1 ELSE 0 END) full_score_count

            FROM  stu_score_rank_data
            GROUP BY classid, subjectid
        ),

        grade_count_data AS (
            SELECT 'TOTAL' classid, subjectid,
            sum(exam_count) stu_exam_count,
            sum(applied_exam_count) stu_applied_exam_count,
            max(score) max_score,
            min(score) min_score,
            round(avg(score), 2) score,
            
            <include refid="calcGradeNScoreSum" />
        
            sqrt(variance(score)) diff,
            avg(full_score) full_score,

            <include refid="calcPassZoneCount" />

            sum(CASE WHEN score >= full_score THEN 1 ELSE 0 END) full_score_count
            FROM stu_score_rank_data
            GROUP BY subjectid
        ),

        grade_avg_score_data AS (
          SELECT subjectid, round(avg(score), 2) avg_score from stu_score_rank_data
          GROUP BY subjectid
        ),
        class_percent_data AS (
            SELECT classid, subjectid,
            stu_exam_count,
            stu_applied_exam_count,
            max_score,
            min_score,
            score,
            <include refid="calcClassNScore" />
            diff,
            ((CASE WHEN stu_applied_exam_count != 0 THEN full_score_count / stu_applied_exam_count ELSE 0 END) * 100) full_score_percent,

            <include refid="calcPassZonePercent" />

            ((CASE WHEN avg_score != 0 THEN score / avg_score ELSE 0 END) * 100) avg_score_percent,
            (score / full_score) difficulty
            FROM class_count_data
            INNER JOIN grade_avg_score_data USING(subjectid)
        ),

        grade_percent_data AS (
            SELECT classid, subjectid,
            stu_exam_count,
            stu_applied_exam_count,
            max_score,
            min_score,
            score,
            <include refid="calcGradeNScore" />
            diff,
            ((CASE WHEN stu_applied_exam_count != 0 THEN full_score_count / stu_applied_exam_count ELSE 0 END) * 100) full_score_percent,

            <include refid="calcPassZonePercent" />

            0 avg_score_percent,
            (score / full_score) difficulty
            FROM grade_count_data
        ),

        percent_stats AS (
            SELECT *,
            (avg_score_percent - 100) avg_score_percent_diff
            FROM class_percent_data
            UNION
            SELECT *,
            0 avg_score_percent_diff
            FROM grade_percent_data
        )

    </sql>

    <sql id="listFilter">
        <where>
            true
            <include refid="BaseMapper.filterClass" />
            <include refid="BaseMapper.filterSubject" />
        </where>
    </sql>

    <select id="selectList" parameterType="com.tianwen.springcloud.microservice.score.entity.request.Request"
            resultType="java.util.Map">
        <include refid="listData" />
        SELECT
        classid class_id,
        stu_exam_count total_count,
        stu_applied_exam_count apply_count,
        max_score,
        min_score,
        round(score, 2) score,
        round(top_n_score, 2) top_n_score,
        round(last_n_score, 2) last_n_score,
        round(diff, 2) diff,
        round(full_score_percent, 2) full_score_percent,

        <foreach collection="filter.zoneList" item="zone">
            ${zone.category}_count_${zone.level},
            <if test="zone.category == 'pz'">
                round(${zone.category}_percent_${zone.level}, 2) ${zone.category}_percent_${zone.level},
            </if>
        </foreach>

        round(avg_score_percent_diff, 2) avg_score_percent_diff,
        round(avg_score_percent, 2) avg_score_percent,
        round(difficulty, 2) difficulty,

        (CASE WHEN classid='TOTAL' THEN 1 ELSE 0 END) class_total

        FROM percent_stats
        <include refid="listFilter" />
        ORDER BY class_total, classid
        <include refid="BaseMapper.sqlFragment_pagination" />
    </select>

    <select id="countList" parameterType="com.tianwen.springcloud.microservice.score.entity.request.Request"
            resultType="Integer">
        <include refid="listData" />
        SELECT COUNT(*) FROM percent_stats
        <include refid="listFilter" />
    </select>

</mapper>
