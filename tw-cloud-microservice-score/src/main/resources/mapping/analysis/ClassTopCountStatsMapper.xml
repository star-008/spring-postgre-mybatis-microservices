<?xml version="1.0" encoding="UTF-8" ?>
<!--

       Copyright 2015-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tianwen.springcloud.microservice.score.dao.analysis.ClassTopCountStatsMapper">

    <sql id="listData">
        WITH

        stu_sbj_score_data AS  (
            SELECT pt.examid, exam.examname, classid, pt.subjectid, stuid, text2score(pt.score) as score,
            1 exam_count,
            CASE WHEN pt.score = '-1' THEN 0 ELSE 1 END applied_exam_count,
            teacherid, teachername
        
            FROM t_e_cj_stu_subject_score pt
            INNER JOIN t_e_cj_exam exam USING(examid)
            <include refid="BaseMapper.joinExamGrade" />
            <where>
                true
                <include refid="BaseMapper.sqlFragment_searchCriteria" />
            </where>
        ),

        stu_total_score_data AS  (
            SELECT examid, examname, classid, 'TOTAL' subjectid, stuid, sum(score) score,
            max(exam_count) stu_exam_count,
            max(applied_exam_count) stu_applied_exam_count,
            teacherid, teachername

            FROM stu_sbj_score_data
            GROUP BY examid, examname, classid, stuid, teacherid, teachername
        ),

        stu_score_data AS (
            SELECT *,
            RANK() OVER (PARTITION BY examid, subjectid ORDER BY score DESC) AS stu_rank_in_grade,
            RANK() OVER (PARTITION BY examid, subjectid ORDER BY score ASC) AS stu_last_rank_in_grade
            FROM stu_sbj_score_data

            UNION

            SELECT *,
            RANK() OVER (PARTITION BY examid ORDER BY score DESC) AS stu_rank_in_grade,
            RANK() OVER (PARTITION BY examid ORDER BY score ASC) AS stu_last_rank_in_grade
            FROM stu_total_score_data
        ),

        cls_score_data AS  (
            SELECT examid, examname,
            classid, subjectid,
            sum(exam_count) stu_exam_count,
            sum(applied_exam_count) stu_applied_exam_count,
            teacherid, teachername,

            <foreach collection="filter.topLevelCountList" item="levelCount">
                sum(CASE WHEN stu_rank_in_grade <![CDATA[<=]]> text2numeric(#{levelCount}) THEN 1 ELSE 0 END) top${levelCount},
            </foreach>

            <foreach collection="filter.lastLevelCountList" item="levelCount">
                sum(CASE WHEN stu_last_rank_in_grade <![CDATA[<=]]> text2numeric(#{levelCount}) THEN 1 ELSE 0 END) last${levelCount},
            </foreach>

            avg(score) score
            FROM stu_score_data
            GROUP BY examid, examname, classid, subjectid, teacherid, teachername
        ),

        grade_score_data AS (
            SELECT examid, 'TOTAL' classid, subjectid,
            avg(score) score
            FROM stu_score_data
            GROUP BY  examid, subjectid
        ),

        rank_stats AS (
            SELECT cls_data.*, grade_data.score avg_score,
            RANK() OVER (PARTITION BY examid, subjectid ORDER BY cls_data.score DESC) AS rank
            FROM cls_score_data cls_data
            INNER JOIN grade_score_data grade_data USING(examid, subjectid)
        )
    </sql>

    <sql id="listFilter">
        <where>
            true
            <include refid="BaseMapper.filterClass" />
            <include refid="BaseMapper.filterSubject" />
        </where>
    </sql>

    <select id="selectList" parameterType="com.tianwen.springcloud.microservice.score.entity.request.Request"
            resultType="java.util.Map">
        <include refid="listData" />
        SELECT
        examid,
        examname,
        classid,
        subjectid,
        teacherid teacher_id,
        teachername teacher_name,
        stu_exam_count total_count,
        stu_applied_exam_count apply_count,
        round(score, 2) score,
        round(avg_score) avg_score,
        <foreach collection="filter.topLevelCountList" item="levelCount">
            top${levelCount},
        </foreach>

        <foreach collection="filter.lastLevelCountList" item="levelCount">
            last${levelCount},
        </foreach>
        rank
        FROM rank_stats
        <include refid="listFilter" />
        ORDER BY examid, classid, subjectid
    </select>

    <select id="countList" parameterType="com.tianwen.springcloud.microservice.score.entity.request.Request"
            resultType="Integer">
        <include refid="listData" />
        SELECT COUNT(*) FROM rank_stats
        <include refid="listFilter" />
    </select>

</mapper>
