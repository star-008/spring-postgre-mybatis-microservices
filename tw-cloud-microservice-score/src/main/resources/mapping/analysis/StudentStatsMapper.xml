<?xml version="1.0" encoding="UTF-8" ?>
<!--

       Copyright 2015-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tianwen.springcloud.microservice.score.dao.analysis.StudentStatsMapper">

    <sql id="listData">
        WITH
        stu_subject_score_data_count AS (
        SELECT * FROM (
        SELECT pt.examid cexamid, pt.gradeid cgradeid, classid cclassid, pt.subjectid csubjectid
        , count(stuid) over(PARTITION BY pt.examid, pt.gradeid, classid, subjectid) stu_count_in_class
        , count(stuid) over(PARTITION BY pt.examid, pt.gradeid, subjectid) stu_count_in_grade
        FROM t_e_cj_stu_subject_score pt
        <where>
                pt.score::NUMERIC != -1
        </where>) as temp
        GROUP BY cexamid, cgradeid, cclassid, csubjectid, stu_count_in_class, stu_count_in_grade
        ),
        stu_subject_score_data_common AS (
            SELECT * FROM (
                SELECT pt.examid cexamid, pt.gradeid cgradeid, classid cclassid, pt.subjectid csubjectid
                , round(avg(text2score(pt.score)) over(PARTITION BY pt.examid, pt.gradeid, classid, subjectid),2) class_avg_score
                , round(avg(text2score(pt.score)) over(PARTITION BY pt.examid, pt.gradeid, subjectid),2) grade_avg_score
                FROM t_e_cj_stu_subject_score pt
                <where>true
                    <if test="
                    filter.more.inclusion == 0">
                            AND pt.score::NUMERIC != -1
                        </if>
                </where>) as temp
            GROUP BY cexamid, cgradeid, cclassid, csubjectid, class_avg_score, grade_avg_score
            ),
           stu_subject_score_data AS (
             SELECT pt.examid, pt.gradeid, classtype, classid, stuid, pt.subjectid
                   , 1 total_count
                   , (CASE WHEN (pt.score = '-1' OR pt.score = '-1.0') THEN 0 ELSE 1 END) apply_count
                   , exam.examname, exam.examstartday as start_date
                   , text2score(ess.score) fullscore
                   , text2score(pt.score) score
                   , max(text2score(pt.score)) over(PARTITION BY pt.examid, pt.gradeid, classid, subjectid) class_max_score
                   , max(text2score(pt.score)) over(PARTITION BY pt.examid, pt.gradeid, subjectid) grade_max_score
                   , ptc.class_avg_score
                   , ptc.grade_avg_score
                    <if test="filter.more.inclusion == 0">
                    , (CASE WHEN pt.score='-1' THEN 0 ELSE rank() over(PARTITION BY pt.examid, pt.gradeid, classid, subjectid ORDER BY text2score(pt.score) DESC) END) stu_rank_in_class
                    , (CASE WHEN pt.score='-1' THEN 0 ELSE rank() over(PARTITION BY pt.examid, pt.gradeid, subjectid ORDER BY text2score(pt.score)DESC) END) stu_rank_in_grade
                    </if>
                    <if test="filter.more.inclusion != 0">
                   , rank() over(PARTITION BY pt.examid, pt.gradeid, classid, subjectid ORDER BY text2score(pt.score) DESC) stu_rank_in_class
                   , rank() over(PARTITION BY pt.examid, pt.gradeid, subjectid ORDER BY text2score(pt.score)DESC) stu_rank_in_grade
                    </if>
                   , ptco.stu_count_in_class
                   , ptco.stu_count_in_grade
             FROM t_e_cj_stu_subject_score pt
             INNER JOIN t_e_cj_exam exam USING (examid)
             INNER JOIN t_e_cj_exam_subject_score ess USING(examid, gradeid, classtype, subjectid)
             LEFT JOIN stu_subject_score_data_common ptc on pt.examid = ptc.cexamid and pt.gradeid = ptc.cgradeid and classid = ptc.cclassid and pt.subjectid = ptc.csubjectid
             LEFT JOIN stu_subject_score_data_count ptco on pt.examid = ptco.cexamid and pt.gradeid = ptco.cgradeid and classid = ptco.cclassid and pt.subjectid = ptco.csubjectid
             <include refid="BaseMapper.joinExamGrade" />
             <where>
                 true
                 <include refid="BaseMapper.sqlFragment_searchCriteria" />
             </where>
           ),
           stu_subject_score_stas1 AS (
             SELECT examid, examname, start_date, stuid, subjectid, total_count, apply_count, fullscore, score, round(fullscore*73/100, 2) standard_score,
                    class_max_score, grade_max_score,
                    class_avg_score,grade_avg_score,
                    stu_rank_in_class, stu_rank_in_grade,
                    stu_count_in_class, stu_count_in_grade,
                    round(score/fullscore*100,2) score_percent,
                    count(*) over(PARTITION BY stu_rank_in_grade) duplicate_count
             FROM stu_subject_score_data
           ),
            stu_subject_score_stas2 AS (
            SELECT *,  calc_percent(stu_rank_in_grade, duplicate_count, stu_count_in_grade) rank_percent
            FROM stu_subject_score_stas1
            WHERE stuid = #{filter.studentId}
            ),
           stu_subject_totalscore_data AS (
             SELECT examid, gradeid, examname, start_date, stuid
                   , max(total_count) total_count
                   , max(apply_count) apply_count
                   , sum(fullscore) fullscore
                   , sum(score) score
             FROM stu_subject_score_data
             GROUP BY examid, gradeid, examname, start_date, stuid
           ),
            class_stu_data AS (
                SELECT classtype, classid, stuid
                FROM (
                SELECT classtype, classid, stuid,
                ROW_NUMBER() OVER(PARTITION BY stuid) rn
                FROM stu_subject_score_data
                GROUP BY stuid, classtype, classid
                ) class_stu_data
                WHERE rn=1
            ),
            stu_subject_totalscore_data0 AS (
                SELECT stu_subject_totalscore_data.*, class_stu_data.classid
                FROM stu_subject_totalscore_data
                INNER JOIN class_stu_data USING(stuid)
            ),

            stu_subject_totalscore_stas1 AS (
            SELECT examid, examname, start_date, stuid, 'TOTAL' subjectid, total_count, apply_count, fullscore, score, round(fullscore*73/100, 2) standard_score
                    , max(score) over(PARTITION BY examid, gradeid, classid) class_max_score
                    , max(score) over(PARTITION BY examid, gradeid) grade_max_score
                    , round(avg(score) over(PARTITION BY examid, gradeid, classid),2) class_avg_score
                    , round(avg(score) over(PARTITION BY examid, gradeid),2) grade_avg_score
                    , rank() over(PARTITION BY examid, gradeid, classid ORDER BY score DESC) stu_rank_in_class
                    , rank() over(PARTITION BY examid, gradeid ORDER BY score DESC) stu_rank_in_grade
                    , count(stuid) over(PARTITION BY examid, gradeid, classid) stu_count_in_class
                    , count(stuid) over(PARTITION BY examid, gradeid) stu_count_in_grade
                    , round(score/fullscore*100,2) score_percent
             FROM stu_subject_totalscore_data0
           ),
           stu_subject_totalscore_stas2 AS (
             SELECT *, count(*) over(PARTITION BY stu_rank_in_grade) duplicate_count
             FROM stu_subject_totalscore_stas1
           ),
            stu_subject_totalscore_stas3 AS (
            SELECT *,calc_percent(stu_rank_in_grade, duplicate_count, stu_count_in_grade) rank_percent
            FROM stu_subject_totalscore_stas2
            WHERE stuid = #{filter.studentId}
            ),
           stu_report AS (
              SELECT *,
              (CASE
                <foreach collection="filter.zoneList" item="zone">
                    <if test="filter.more.type == 3">
                        WHEN rank_percent &lt;= #{zone.lowScore}::NUMERIC then #{zone.degree}
                    </if>
                    <if test="filter.more.type == 4">
                        WHEN score_percent >= #{zone.lowScore}::NUMERIC then #{zone.degree}
                    </if>
                </foreach>
                <if test="filter.more.type == 3">
                  WHEN rank_percent &lt;= 0 then null
                </if>
                <if test="filter.more.type == 4">
                    WHEN score_percent >= 0 then null
                </if>
                ELSE null
              END) degree
              FROM
             (SELECT * FROM stu_subject_score_stas2
             UNION
             SELECT * FROM stu_subject_totalscore_stas3) tt
           )
    </sql>

    <sql id="listFilter">
        <where>
            true
            <include refid="BaseMapper.filterSubject" />
        </where>
    </sql>

    <select id="selectList" parameterType="com.tianwen.springcloud.microservice.score.entity.request.Request"
            resultType="com.tianwen.springcloud.microservice.score.entity.analysis.StudentStats">
        <include refid="listData" />
        SELECT
        * FROM stu_report
        <include refid="listFilter" />
    </select>

    <select id="countList" parameterType="com.tianwen.springcloud.microservice.score.entity.request.Request"
            resultType="Integer">
        <include refid="listData" />
        SELECT COUNT(*) FROM stu_report
        <include refid="listFilter" />
    </select>
</mapper>
